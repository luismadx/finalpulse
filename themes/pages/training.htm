title = "Product Training" 
url = "/training/:slug/:slide?"
layout = "default"
is_hidden = 0
==
<?php
use Db;
use Twig\Environment;
use Twig\Loader\ArrayLoader;
use Twig\Error\SyntaxError;   // importa a excepção

/**
 * Compila de forma segura um fragmento Twig, escapando erros de sintaxe.
 */
private function safeTwig(string $raw, array $ctx): string
{
    try {
        return (new Environment(new ArrayLoader(['tpl' => $raw])))
               ->render('tpl', $ctx);
    } catch (SyntaxError $e) {
        // converte tags Twig em entidades HTML
        return str_replace(
            ['{{','}}','{%','%}','{#','#}'],
            ['&#123;&#123;','&#125;&#125;','&#123;%','%&#125;','&#123;#','#&#125;'],
            $raw
        );
    }
}

/**
 * Obtém o produto a partir do slug.
 */
private function getProduct()
{
    $slug  = $this->param('slug');
    $product = Db::table('f_products')->where('slug', $slug)->first();
    return $product;
}

/**
 * Gera o conteúdo HTML do slide, incluindo navegação e checkbox.
 */
protected function renderSlideContent(string $slug,int $slide,int $slidesCount)
{
    $user = Auth::getUser();     
    $product = Db::table('f_products')->where('slug',$slug)->first();
    if(!$product) return ['html'=>'<p>Produto não encontrado.</p>','prev'=>'','next'=>''];

    $ctx=['slug'=>$slug,'stepNumber'=>$slide, 'user' => $user];

    if($slide===0){                                          // intro
        $raw=Db::table('f_template_sections')->where('type','i')->first()->html_content;
        
        $ctx['intro_action']=$product->intro_action;
        $ctx['intro_action_description']=$product->intro_action_description;
        
        $ctx['intro_learning_objectives']  =$product->intro_learning_objectives;
        $ctx['intro_estimated_duration']=$product->intro_estimated_duration;
        
        
        $ctx['intro_course_structure']=$product->intro_course_structure;
        $ctx['intro_warning']=$product->intro_warning;
        $ctx['intro_warning_description']=$product->intro_warning_description;
        $ctx['intro_button_start']=$product->intro_button_start;

    }
    elseif($slide===$slidesCount){                           // final
        $raw=Db::table('f_template_sections')->where('type','f')->first()->html_content;
        $ctx+=[
          'final_title'   =>$product->final_title,
          'final_subtitle'=>$product->final_subtitle,
          'final_skills'  =>$product->final_skills,
          'final_support' =>$product->final_support,
          'final_button'  => "window.location.href='/questions/{$slug}'"
        ];
    }
    else{                                                    // slides normais
        $rec=Db::table('f_content')
            ->join('f_template_sections','f_content.section_id','=','f_template_sections.id')
            ->where('product_id',$product->id)->where('slide',$slide)
            ->select('f_content.content as saved_content')->first();
        $raw=$rec? $rec->saved_content:'<p>Slide não encontrado.</p>';
    }

    $html = $this->safeTwig($raw, $ctx);

    /* adiciona checkbox de conclusão nos slides intermédios */
    if($slide>=1 && $slide<$slidesCount){
        $user=Auth::getUser();
        $hRec=$user?Db::table('f_historic')
                    ->where('user_id',$user->id)
                    ->where('product_id',$product->id)->first():null;
        $hId=$hRec->id??'';
        $line=Db::table('f_historic_lines')
              ->where('historic_id',$hId)
              ->where('slide',$slide)->first();
        $checked=($line && $line->completed)?' checked':'';

        $html.=<<<HTML
<div class="step-checkbox-container" data-slide="{$slide}" data-historic-id="{$hId}">
  <input type="checkbox" class="step-checkbox" id="step-{$slide}"{$checked}
         onchange="toggleStepCompletion(this)">
  <label class="checkbox-label" for="step-{$slide}">Marcar este passo como concluído</label>
</div>
HTML;
    }

    /* gera botões de navegação */
    if($slide===$slidesCount){
        $prev=$next='';
    }else{
        $prevDisabled=$slide<=1?' disabled':'';
        $nextDisabled=($slide+1>$slidesCount)?' disabled':'';
        $prev='<button class="nav-btn" data-slide="'.($slide-1).'"'.$prevDisabled.'>‹ Anterior</button>';
        $next='<button class="nav-btn" data-slide="'.($slide+1).'"'.$nextDisabled.'>Seguinte ›</button>';
    }

    return ['html'=>$html,'prev'=>$prev,'next'=>$next];
}

/**
 * Marca um slide como visto no histórico.
 */
private function markSlideSeen($historicId,int $slide,int $slidesCount)
{
    if($historicId && $slide>=1 && $slide<$slidesCount){
        Db::table('f_historic_lines')
            ->where('historic_id',$historicId)
            ->where('slide',$slide)
            ->update(['seen'=>1]);
    }
}

/**
 * Inicialização da página: carrega slide e histórico do utilizador.
 */
function onStart()
{
    $slug  = $this->param('slug');
    $slide = (int)$this->param('slide');

    $product=self::getProduct(); 
    $productId=$product->id;

    
    $slidesCountContent=Db::table('f_content')->where('product_id',$productId)->count();
    $slidesCount=$slidesCountContent+1;        // +1 = slide final

    $resp=$this->renderSlideContent($slug,$slide,$slidesCount);

    $user=Auth::getUser();

    if (!$user && $slide > 0) {
        return Redirect::to("/training/{$slug}/0");
    }

    if($user){
        $hRec=Db::table('f_historic')
                ->where('user_id',$user->id)
                ->where('product_id',$productId)->first();
        if($hRec){
            $this->markSlideSeen($hRec->id,$slide,$slidesCount);

            $completedSteps=Db::table('f_historic_lines')->where('historic_id',$hRec->id)->where('completed',1)->pluck('slide');
            $this['completedSteps']=$completedSteps;
        }
    }

    $isPrivileged = $user && $user->groups()->whereIn('code', ['product_manager', 'admin'])->exists();
    $this['skipCompletionCheck'] = (!$product->published) && $isPrivileged;

    $this['slideHtml']    =$resp['html'];
    $this['currentSlide'] =$slide;
    $this['slug']         =$slug;
    $this['slidesCount']  =$slidesCount;
    $this['btnPrev']      =$resp['prev'];
    $this['btnNext']      =$resp['next'];
    
    $this['intro_title'] =Db::table('f_products')->where('slug',$slug)->value('intro_title');
    $this['intro_subtitle'] =Db::table('f_products')->where('slug',$slug)->value('intro_subtitle');

    $this['user'] = $user;
    $this['headerPartial']='layouts/template1';

    $category = Db::table('f_categories')
                  ->where('id', $product->id_categories)
                  ->first();
    $isOwner = $user && $category && $user->id === $category->user_id;
    $this['showEditorButton'] = $isOwner;
}

/**
 * Trata pedidos AJAX para carregar um slide específico.
 */
function onGetSlide()
{
    $slug  = $this->param('slug');
    $slide = (int)post('slide');
    $productId = self::getProduct()->id;

    $slidesCountContent=Db::table('f_content')->where('product_id',$productId)->count();
    $slidesCount=$slidesCountContent+1;

    $resp=$this->renderSlideContent($slug,$slide,$slidesCount);

    $user=Auth::getUser();    
    if($user){
        $hRec=Db::table('f_historic')->where('user_id',$user->id)->where('product_id',$productId)->first();
        if($hRec) $this->markSlideSeen($hRec->id,$slide,$slidesCount);
    }

    return [
        '#slideContent'=>$resp['html'],
        '#btnPrev'     =>$resp['prev'],
        '#btnNext'     =>$resp['next']
    ];
}

/**
 * Inicia ou retoma histórico de visualização do produto.
 */
function onStartHistoric() 
{
    $user = Auth::getUser();
    if (!$user) {
        return ['error' => 'Tem de estar autenticado para começar.'];
    }

    $product= self::getProduct();
    if (!$product->published) return;

    // obtém ou cria o registo em f_historic
    $rec = Db::table('f_historic')->where('user_id', $user->id)->where('product_id', $product->id)->first();

    if ($rec) {
        $hId = $rec->id;
    } else {
        $hId = Db::table('f_historic')->insertGetId([
            'user_id'    => $user->id,
            'product_id' => $product->id,
            'created_at' => now()
        ]);
    }

    // pré-cria/garante linhas em f_historic_lines para cada slide
    $slidesCount = Db::table('f_content')
        ->where('product_id', $product->id)
        ->count();

    for ($i = 1; $i <= $slidesCount; $i++) {
        $existsLine = Db::table('f_historic_lines')->where('historic_id', $hId)->where('slide', $i)->exists();

        if (! $existsLine) {
            Db::table('f_historic_lines')->insert([
                'historic_id' => $hId,
                'slide'       => $i,
                'completed'   => 0,
                'created_at'  => now()
            ]);
        }
    }

    // devolve o ID para uso no JavaScript
    return ['historicId' => $hId];
}

/**
 * Atualiza o estado de conclusão de um passo no histórico.
 */
function onToggleStep()
{
    $hId       = post('historic_id');
    $slide     = (int) post('slide');
    $completed = (int) post('completed'); // 0 ou 1

    if (!$hId) {
        return ['error'=>'Historic ID em falta'];
    }

    // Upsert da linha de histórico
    $exists = Db::table('f_historic_lines')
        ->where('historic_id', $hId)
        ->where('slide', $slide)
        ->exists();

    if ($exists) {
        Db::table('f_historic_lines')
            ->where('historic_id', $hId)
            ->where('slide', $slide)
            ->update([
                'completed'  => $completed,
                'updated_at' => now()
            ]);
    }
    else {
        Db::table('f_historic_lines')
            ->insert([
                'historic_id' => $hId,
                'slide'       => $slide,
                'completed'   => $completed,
                'updated_at'  => now()
            ]);
    }
}
?>
