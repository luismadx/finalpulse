title  = "Questions Editor"
url    = "/questions_editor/:slug"
layout = "default"
is_hidden = 0
==
<?php
use Db;

/* onStart: carrega produto e perguntas */
function onStart()
{
    $slug = $this->param('slug');

    $product = Db::table('f_products')->where('slug', $slug)->first();
    if (!$product) {
        return ['error' => 'Produto não encontrado.'];
    }

    $this['isPublished'] = $product->published == 1;
    $this['prodId']    = $product->id;
    $this['slug']      = $slug;
    $this['prodName']  = $product->name;
    $this['questions'] = Db::table('f_questions')
        ->where('product_id', $product->id)
        ->orderBy('index')
        ->get([
            'id','index',
            'question as text',
            'answer1','answer2','answer3','answer4',
            'correct_answer'
        ]);
}

/* onSaveQuestion: insere ou atualiza pergunta */
function onSaveQuestion()
{
    $id      = post('id');
    $prodId  = post('prodId');
    $text    = post('text');
    $a1      = post('a1');  $a2 = post('a2');  $a3 = post('a3');  $a4 = post('a4');
    $correct = post('correct');

    $slug = $this->param('slug');
    $product = Db::table('f_products')->where('slug', $slug)->first();
    if (!$product) {
        return ['error' => 'Produto não encontrado.'];
    }

    if ($product->published == 1) {
        return Response::json(['success' => false, 'message' => 'Produto já publicado'], 403);
    }

    if ($id) {  // update
        Db::table('f_questions')->where('id', $id)->update([
            'question'       => $text,
            'answer1'        => $a1,
            'answer2'        => $a2,
            'answer3'        => $a3,
            'answer4'        => $a4,
            'correct_answer' => $correct,
            'updated_at'     => now()
        ]);
    } else {  // insert
        $max = Db::table('f_questions')->where('product_id', $prodId)->max('index') ?? 0;
        $id = Db::table('f_questions')->insertGetId([
            'product_id'     => $prodId,
            'index'          => $max + 1,
            'question'       => $text,
            'answer1'        => $a1,
            'answer2'        => $a2,
            'answer3'        => $a3,
            'answer4'        => $a4,
            'correct_answer' => $correct,
            'created_at'     => now()
        ]);
    }

    return Db::table('f_questions')->where('id', $id)->first();
}

/* onDeleteQuestion: apaga e renumera índices */
function onDeleteQuestion()
{

    $slug = $this->param('slug');
    $product = Db::table('f_products')->where('slug', $slug)->first();
    if (!$product) {
        return ['error' => 'Produto não encontrado.'];
    }

    if ($product->published == 1) {
        return Response::json(['success' => false, 'message' => 'Produto já publicado'], 403);
    }
  
    $id     = post('id');
    $prodId = post('prodId');

    Db::table('f_questions')->where('id', $id)->delete();

    $qs = Db::table('f_questions')
        ->where('product_id', $prodId)
        ->orderBy('index')
        ->get(['id']);

    foreach ($qs as $idx => $q) {
        Db::table('f_questions')->where('id', $q->id)->update(['index' => $idx + 1]);
    }

    $map = Db::table('f_questions')
        ->where('product_id', $prodId)
        ->pluck('index', 'id');

    return ['map' => $map];
}
?>
==

<div class="max-w-5xl mx-auto my-12">

  <!-- TÍTULO -->
  <h1 class="text-2xl font-bold mb-4">
    Editor de Perguntas – {{ prodName }}
  </h1>

  <!-- BOTÕES -->
  <div class="flex flex-wrap gap-3 mb-6">
    {% if not isPublished %}
      <button id="btnAdd"
              class="bg-indigo-600 hover:bg-indigo-700 text-white font-medium px-5 py-2 rounded cursor-pointer">
        + Nova Pergunta
      </button>
    {% endif %}
    <button id="btnEditorPages"
            onclick="window.location.href='/editor/{{ slug }}/1'"
            class="bg-green-600 hover:bg-green-700 text-white font-medium px-5 py-2 rounded cursor-pointer">
      Terminar questionário
    </button>
  </div>

  <!-- LISTA DE PERGUNTAS -->
  <div class="bg-white shadow rounded-lg overflow-hidden">
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200 text-sm">
        <thead class="bg-gray-50 text-gray-700 font-semibold">
          <tr>
            <th class="px-4 py-3 text-left">#</th>
            <th class="px-4 py-3 text-left">Pergunta</th>
            <th class="px-4 py-3 text-center">Correta</th>
            <th class="px-4 py-3"></th>
          </tr>
        </thead>
        <tbody id="tblBody" class="divide-y divide-gray-100 bg-white">
          {% for q in questions %}
            <tr id="row{{ q.id }}"
                class="hover:bg-gray-50"
                data-id="{{ q.id }}"
                data-text="{{ q.text|e('html_attr') }}"
                data-a1="{{ q.answer1|e('html_attr') }}"
                data-a2="{{ q.answer2|e('html_attr') }}"
                data-a3="{{ q.answer3|e('html_attr') }}"
                data-a4="{{ q.answer4|e('html_attr') }}"
                data-correct="{{ q.correct_answer }}">
              <td class="px-4 py-3 idx whitespace-nowrap">{{ q.index }}</td>
              <td class="px-4 py-3 whitespace-nowrap">
                {{ q.text|length>60 ? q.text|slice(0,60)~'…' : q.text }}
              </td>
              <td class="px-4 py-3 text-center font-semibold whitespace-nowrap">
                {{ ['A','B','C','D'][q.correct_answer-1] }}
              </td>
              <td class="px-4 py-3 text-right space-x-2 whitespace-nowrap">
                {% if not isPublished %}
                  <button type="button"
                          class="btnEdit inline-flex items-center px-4 py-2 rounded bg-indigo-600 text-white text-xs cursor-pointer font-semibold
                                 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-400"
                          data-id="{{ q.id }}">
                    Editar
                  </button>
                  <button type="button"
                          class="btnDel inline-flex items-center px-4 py-2 rounded bg-red-600 text-white text-xs cursor-pointer font-semibold
                                 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-400"
                          data-id="{{ q.id }}">
                    Apagar
                  </button>
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- MODAL -->
<div id="modal"
     class="fixed inset-0 bg-black/40 flex items-center justify-center z-50 hidden">
  <div class="bg-white w-full max-w-lg rounded-lg shadow-lg">
    <div class="px-6 py-4 border-b flex justify-between items-center">
      <h2 class="text-xl font-bold" id="modalTitle">Editar Pergunta</h2>
      <button id="btnClose" class="text-gray-500 hover:text-gray-700">&times;</button>
    </div>

    <div class="p-6 space-y-4">
      <input type="hidden" id="qId">
      <input type="hidden" id="prodId" value="{{ prodId }}">

      <div>
        <label class="block font-medium mb-1">Pergunta</label>
        <textarea id="qText" class="w-full border rounded px-3 py-2" rows="2"></textarea>
      </div>

      {% for i in 1..4 %}
        <div>
          <label class="block font-medium mb-1">Resposta {{ ['A','B','C','D'][i-1] }}</label>
          <input id="a{{ i }}" class="w-full border rounded px-3 py-2">
        </div>
      {% endfor %}

      <div>
        <label class="block font-medium mb-1">Correta</label>
        <select id="correct" class="border rounded px-3 py-2 w-full">
          <option value="1">A</option><option value="2">B</option>
          <option value="3">C</option><option value="4">D</option>
        </select>
      </div>
    </div>

    <div class="px-6 py-4 border-t text-right">
      <button id="btnSave"
              class="bg-green-600 hover:bg-green-700 text-white font-medium px-6 py-2 rounded">
        Guardar
      </button>
    </div>
  </div>
</div>

{% put scripts %}
<script>
$(function(){

  const letters = ['A','B','C','D'];

  /* openModal: prepara e mostra modal */
  function openModal(data = {}) {
    $('#qId').val(data.id || '');
    $('#qText').val(data.text || '');
    $('#a1').val(data.a1 || ''); $('#a2').val(data.a2 || '');
    $('#a3').val(data.a3 || ''); $('#a4').val(data.a4 || '');
    $('#correct').val(data.correct || '1');
    $('#modalTitle').text(data.id ? 'Editar Pergunta' : 'Nova Pergunta');
    $('#modal').removeClass('hidden');
  }

  $('#btnAdd').on('click', () => openModal());
  $(document).on('click', '.btnEdit', function () {
    const $r = $('#row' + $(this).data('id'));
    openModal($r.data());
  });
  $('#btnClose').on('click', () => $('#modal').addClass('hidden'));

  /* btnSave: envia dados de criação/edição */
  $('#btnSave').on('click', () => {
    const payload = {
      id      : $('#qId').val(),
      prodId  : $('#prodId').val(),
      text    : $('#qText').val(),
      a1      : $('#a1').val(),  a2:$('#a2').val(),
      a3      : $('#a3').val(),  a4:$('#a4').val(),
      correct : $('#correct').val()
    };

    $.request('onSaveQuestion', {
      data: payload,
      success: function (q) {
        const short = q.question.length > 60 ? q.question.substr(0, 60) + '…' : q.question;

        if ($('#row' + q.id).length) {  // update existente
          const $r = $('#row' + q.id);
          $r.data({
            text   : q.question,
            a1     : q.answer1,
            a2     : q.answer2,
            a3     : q.answer3,
            a4     : q.answer4,
            correct: q.correct_answer
          });
          $r.find('td:nth-child(2)').text(short);
          $r.find('td:nth-child(3)').text(letters[q.correct_answer - 1]);
        } else {  // nova linha
          $('#tblBody').append(`
            <tr id="row${q.id}" class="border-t"
                data-id="${q.id}"
                data-text="${q.question.replace(/"/g,'&quot;')}"
                data-a1="${q.answer1.replace(/"/g,'&quot;')}"
                data-a2="${q.answer2.replace(/"/g,'&quot;')}"
                data-a3="${q.answer3.replace(/"/g,'&quot;')}"
                data-a4="${q.answer4.replace(/"/g,'&quot;')}"
                data-correct="${q.correct_answer}">
              <td class="px-3 py-2 idx">${q.index}</td>
              <td class="px-3 py-2">${short}</td>
              <td class="px-3 py-2 text-center font-semibold">${letters[q.correct_answer-1]}</td>
              <td class="px-4 py-3 text-right space-x-2 whitespace-nowrap">
                    <button type="button"
                            class="btnEdit inline-flex items-center px-4 py-2 rounded bg-indigo-600 text-white text-xs cursor-pointer font-semibold
                                   hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-400"
                            data-id="${q.id}">
                      Editar
                    </button>
                    <button type="button"
                            class="btnDel inline-flex items-center px-4 py-2 rounded bg-red-600 text-white text-xs cursor-pointer font-semibold
                                   hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-400"
                            data-id="${q.id}">
                      Apagar
                    </button>
              </td>
            </tr>
          `);
        }
        $('#modal').addClass('hidden');
      }
    });
  });

  /* btnDel: apaga pergunta com confirmação */
  $(document).on('click', '.btnDel', function () {
    const id = $(this).data('id');

    Swal.fire({
      title: 'Apagar esta pergunta?',
      text:  'Esta operação é irreversível.',
      icon:  'warning',
      showCancelButton: true,
      confirmButtonText: 'Sim, apagar',
      cancelButtonText:  'Cancelar',
      confirmButtonColor: '#d33'
    }).then((result) => {
      if (!result.isConfirmed) return;

      $.request('onDeleteQuestion', {
        data: { id: id, prodId: $('#prodId').val() },
        success: function (resp) {
          $('#row' + id).remove();
          for (const [qid, idx] of Object.entries(resp.map)) {
            $('#row' + qid).find('.idx').text(idx);
          }
          Swal.fire('Apagado!', 'A pergunta foi removida.', 'success');
        },
        error: function (xhr) {
          Swal.fire('Erro', xhr.responseText, 'error');
        }
      });
    });
  });

});
</script>
{% endput %}
