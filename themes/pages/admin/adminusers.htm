title = "Admin Users"
url = "/adminusers"
layout = "default"
description = "Página de gestão de utilizadores"
==
<?php
use RainLab\User\Models\User;
use RainLab\User\Models\UserGroup;
use Illuminate\Support\Str;
use Flash;
use Mail;

public function onStart()
{

    $user = Auth::getUser();
    if (!$user || !$user->groups()->whereIn('code', ['admin'])->exists()) {
        return Redirect::to('/');   // redireciona para a home
    }

    
    $this['searchTerm']  = input('searchTerm');
    $this['roleFilter']  = input('roleFilter');
    $this['sort']        = input('sort', 'created_at');
    $this['dir']         = input('dir', 'desc');
    $this['roles']       = UserGroup::orderBy('name')->get();
    $this['users']       = $this->loadUsers(
        $this['searchTerm'],
        $this['roleFilter'],
        $this['sort'],
        $this['dir']
    );
}

protected function loadUsers($search = null, $roleFilter = null, $sort = 'created_at', $dir = 'desc')
{
    $query = User::with('groups');

    if ($search) {
        $query->where(function($q) use ($search) {
            $q->where('name',     'like', '%'.$search.'%')
              ->orWhere('username','like', '%'.$search.'%')
              ->orWhere('email',   'like', '%'.$search.'%');
        });
    }

    if ($roleFilter) {
        $query->whereHas('groups', function($q) use ($roleFilter) {
            $q->where('id', $roleFilter);
        });
    }

    if ($sort == 'role') {
        $query->select('users.*')
              ->join('users_groups as pivot', 'users.id', '=', 'pivot.user_id')
              ->join('user_groups as ug',     'pivot.user_group_id', '=', 'ug.id')
              ->orderBy('ug.name', $dir);
    }
    elseif ($sort == 'last_login') {
        $query->orderBy('last_login', $dir);
    }
    else {
        $query->orderBy($sort, $dir);
    }

    return $query->paginate(20);
}

public function onUpdateRole()
{
    $user = User::find(post('user_id'));
    if ($user && $role = UserGroup::find(post('role_id'))) {
        $user->groups()->sync([$role->id]);
        Flash::success('Role actualizado!');
    }
}


public function onCreateUser()
{
    $name     = post('new_name');
    $username = post('new_username');
    $email    = post('new_email');
    $password = Str::random(12);

    $user = User::create([
        'name'                  => $name,
        'username'              => $username,
        'email'                 => $email,
        'password'              => $password,
        'password_confirmation' => $password,
        'is_activated'          => false,
    ]);

    if ($roleId = post('new_role')) {
        $user->groups()->attach([$roleId]);
    }

    // gera activation_code e grava
    $user->activation_code = Str::random(40);
    $user->save();

    $activationUrl = url('/account/'.$user->activation_code);

    try {
        Mail::send('winter.user::mail.activate', [
            'user'          => $user,
            'activationUrl' => $activationUrl
        ], function($m) use($user) {
            $m->to($user->email, $user->name);
        });

        Flash::success('Utilizador criado! Email de activação enviado a '.$user->email);
    }
    catch (\Exception $e) {
        Flash::error('Erro ao enviar e-mail: '.$e->getMessage());
    }
}



?>
==

{# Importa o próprio ficheiro como `s` para usar o macro #}
{% import _self as s %}


{# Definição do macro sortLink #}
{% macro sortLink(label, field, base, currentSort, currentDir) %}
    {% set newDir = currentSort == field and currentDir == 'asc' ? 'desc' : 'asc' %}
    {% set params = base|merge({'sort':field,'dir':newDir}) %}
    {% set qs = '' %}
    {% for key, val in params %}
        {% set sep = loop.first ? '?' : '&' %}
        {% set qs = qs ~ sep ~ key ~ '=' ~ val %}
    {% endfor %}
    <a href="{{ url }}{{ qs }}" class="flex items-center gap-1">
        {{ label }}
        {% if currentSort == field %}
            <span>{{ currentDir == 'asc' ? '▲' : '▼' }}</span>
        {% endif %}
    </a>
{% endmacro %}

<div class="container mx-auto p-6"  style="height:calc(100vh - 5rem);">
    <h1 class="text-2xl font-semibold mb-6">Gestão de Utilizadores</h1>

    <form class="mb-6 flex flex-col sm:flex-row gap-3">
        <input
            type="text"
            name="searchTerm"
            placeholder="Pesquisar por nome, username ou email"
            class="flex-grow px-4 py-2 border rounded-md"
            value="{{ searchTerm }}"
        >
        <select name="roleFilter" class="px-4 py-2 border rounded-md">
            <option value="">Todas Roles</option>
            {% for role in roles %}
                <option value="{{ role.id }}" {{ roleFilter == role.id ? 'selected' }}>{{ role.name }}</option>
            {% endfor %}
        </select>
        <button class="px-4 py-2 rounded-md bg-blue-600 text-white">Pesquisar</button>
    </form>

    <button data-modal-toggle="createUserModal" class="mb-4 px-4 py-2 rounded-md bg-green-600 text-white" >  + Criar Utilizador  </button>

<div id="usersTable">
  <div class="bg-white shadow rounded-lg overflow-hidden">
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200 text-sm">
        <thead class="bg-gray-50 text-gray-700 font-semibold">
          <tr>
            <th class="px-4 py-3 cursor-pointer select-none">
              {{ s.sortLink('Nome','name',{'searchTerm':searchTerm,'roleFilter':roleFilter},sort,dir) }}
            </th>
            <th class="px-4 py-3 cursor-pointer select-none">
              {{ s.sortLink('Username','username',{'searchTerm':searchTerm,'roleFilter':roleFilter},sort,dir) }}
            </th>
            <th class="px-4 py-3 cursor-pointer select-none">
              {{ s.sortLink('Email','email',{'searchTerm':searchTerm,'roleFilter':roleFilter},sort,dir) }}
            </th>
            <th class="px-4 py-3 cursor-pointer select-none">
              {{ s.sortLink('Role','role',{'searchTerm':searchTerm,'roleFilter':roleFilter},sort,dir) }}
            </th>
            <th class="px-4 py-3 cursor-pointer select-none">
              {{ s.sortLink('Registado','created_at',{'searchTerm':searchTerm,'roleFilter':roleFilter},sort,dir) }}
            </th>
            <th class="px-4 py-3 cursor-pointer select-none">
              {{ s.sortLink('Último login','last_login',{'searchTerm':searchTerm,'roleFilter':roleFilter},sort,dir) }}
            </th>
            <th class="px-4 py-3 text-center">Alterar role</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-100 bg-white">
          {% for user in users %}
            {% set currentRole = user.groups.first() %}
            <tr class="hover:bg-gray-50 w-32">
              <td class="px-4 py-3 whitespace-nowrap">{{ user.name }}</td>
              <td class="px-4 py-3 whitespace-nowrap">{{ user.username }}</td>
              <td class="px-4 py-3 whitespace-nowrap">{{ user.email }}</td>
              <td class="px-4 py-3 whitespace-nowrap">{{ currentRole ? currentRole.name : '—' }}</td>
              <td class="px-4 py-3 whitespace-nowrap">{{ user.created_at|date('d/m/Y') }}</td>
              <td class="px-4 py-3 whitespace-nowrap">{{ user.last_login ? user.last_login|date('d/m/Y H:i') : '—' }}</td>
              <td class="px-4 py-3 text-center">
                <form method="post"
                      data-request="onUpdateRole"
                      data-request-flash
                      data-request-success="location.reload()"
                      class="inline-block">
                  {{ form_token() }}
                  <input type="hidden" name="user_id" value="{{ user.id }}">
                  <select name="role_id"
                          class="border rounded-md px-2 py-1 w-50"
                          onchange="$(this).closest('form').request()">
                    {% for role in roles %}
                      <option value="{{ role.id }}"
                              {{ currentRole and currentRole.id == role.id ? 'selected' }}>
                        {{ role.name }}
                      </option>
                    {% endfor %}
                  </select>
                </form>
              </td>
            </tr>
          {% else %}
            <tr>
              <td colspan="7" class="px-4 py-4 text-center">Nenhum utilizador encontrado.</td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
    <div class="p-4">
      {{ users.appends({
          'searchTerm': searchTerm,
          'roleFilter': roleFilter,
          'sort':       sort,
          'dir':        dir
        }).render|raw }}
    </div>
  </div>
</div>




</div>

<div id="createUserModal" class="hidden fixed inset-0 z-50 bg-black/50 flex items-center justify-center">
    <div class="bg-white rounded-lg p-6 w-full max-w-md">
        <h2 class="text-xl font-medium mb-4">Novo Utilizador</h2>
        <form
            data-request="onCreateUser"
            data-request-flash
            data-request-success="location.reload()"
        >
            {{ form_token() }}
            <div class="mb-4">
                <label class="block text-sm mb-1">Nome</label>
                <input type="text" name="new_name" required class="w-full border rounded-md px-3 py-2">
            </div>
            <div class="mb-4">
                <label class="block text-sm mb-1">Username</label>
                <input type="text" name="new_username" required class="w-full border rounded-md px-3 py-2">
            </div>
            <div class="mb-4">
                <label class="block text-sm mb-1">Email</label>
                <input type="email" name="new_email" required class="w-full border rounded-md px-3 py-2">
            </div>
            <div class="mb-6">
                <label class="block text-sm mb-1">Role</label>
                <select name="new_role" required class="w-full border rounded-md px-3 py-2">
                    <option value="">Escolha uma role</option>
                    {% for role in roles %}
                        <option value="{{ role.id }}">{{ role.name }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="flex justify-end gap-3">
                <button type="button" onclick="hideModal()" class="px-4 py-2 rounded-md border">Cancelar</button>
                <button type="submit" class="px-4 py-2 rounded-md bg-green-600 text-white">Criar</button>
            </div>
        </form>
    </div>
</div>

<script>
function hideModal(){
    document.getElementById('createUserModal').classList.add('hidden');
}
document.querySelectorAll('[data-modal-toggle]').forEach(btn => {
    btn.addEventListener('click', () => {
        document.getElementById(btn.dataset.modalToggle).classList.remove('hidden');
    });
});
</script>
