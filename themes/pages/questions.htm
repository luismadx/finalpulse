title  = "Questions"
url    = "/questions/:slug"
layout = "default"
is_hidden = 0
==
<?php
use Db;
use Auth;

/* getProduct: obtém produto pelo slug */
private function getProduct()
{
    $slug  = $this->param('slug');
    $product = Db::table('f_products')->where('slug', $slug)->first();
    return $product;
}

/* onStart: prepara perguntas e histórico de utilizador */
function onStart()
{
    $user = Auth::getUser();
    if (!$user) {
        header('Location: /');
        exit;
    }

    $slug = $this->param('slug');
    
    $product= self::getProduct();

    if (!$product->published) {
        if (!$user->groups()->whereIn('code', ['product_manager', 'admin'])->exists() ) {
            return Redirect::to('/');
        }
    }

    if (!$product) {
        return ['error' => 'Produto não encontrado.'];
    }

    $rec = Db::table('f_historic')
        ->where('user_id', $user->id)
        ->where('product_id', $product->id)
        ->first();

    $maxTries = 20;
    if ($rec && $rec->questions_tried >= $maxTries) {
        $this['maxReached'] = true;
        $this['maxTries']   = $maxTries;
        return;
    }

    $qs = Db::table('f_questions')
        ->where('product_id', $product->id)
        ->orderBy('index')
        ->limit(10)
        ->get([
            'index',
            'question as text',
            'answer1','answer2','answer3','answer4',
            'correct_answer'
        ]);

    $this['questions']   = $qs;
    $this['total']       = count($qs);
    $this['slug']        = $slug;
    $this['maxReached']  = false;
    $this['maxTries']    = $maxTries;
}

/* onSaveResults: regista tentativas e resultados */
function onSaveResults()
{
    $user = Auth::getUser();
    if (!$user) {
        return ['error' => 'Autenticação necessária.'];
    }

    $product= self::getProduct();
    if (!$product->published) return;

    $slug  = post('slug');
    $correct = (int) post('correct');
    $total   = (int) post('total');

    $prod = Db::table('f_products')->where('slug', $slug)->first();
    if (!$prod) {
        return ['error' => 'Produto não encontrado.'];
    }

    $base = ['user_id' => $user->id, 'product_id' => $prod->id];
    $rec  = Db::table('f_historic')->where($base)->first();

    if ($rec) {
        $newTries = $rec->questions_tried + 1;
        Db::table('f_historic')->where('id', $rec->id)->update([
            'questions_tried'   => $newTries,
            'questions_correct' => $correct,
            'questions_total'   => $total,
            'updated_at'        => now()
        ]);
    } else {
        $newTries = 1;
        Db::table('f_historic')->insert($base + [
            'questions_tried'   => $newTries,
            'questions_correct' => $correct,
            'questions_total'   => $total,
            'created_at'        => now(),
            'updated_at'        => now()
        ]);
    }

    return ['status' => 'ok'];
}
?>
==

{% set letters = ['A','B','C','D'] %}

{% if maxReached %}
  <div class="max-w-xl mx-auto my-12 bg-white rounded-lg shadow-lg p-6 text-center">
    <h2 class="text-xl font-semibold mb-4">Limite de tentativas atingido</h2>
    <p>Já respondeste ao máximo de {{ maxTries }} tentativas.</p>
    <a href="/" class="mt-6 inline-block bg-indigo-600 hover:bg-indigo-700 text-white font-medium px-6 py-3 rounded">
      Voltar à página principal
    </a>
  </div>
{% else %}

<div class="max-w-xl mx-auto my-12 bg-white rounded-lg shadow-lg overflow-hidden">

  <div class="px-6 py-4">

    <div id="progress" class="text-sm text-gray-500 mb-4">
      Pergunta 1 de {{ total }}
    </div>

    {# — apresenta cada pergunta individualmente — #}
    {% for q in questions %}
      <div class="question-block {% if not loop.first %}hidden{% endif %}" data-idx="{{ loop.index }}">
        <h2 class="font-semibold mb-3">{{ loop.index }}. {{ q.text }}</h2>

        <ul class="space-y-3">
          {% for opt in [q.answer1,q.answer2,q.answer3,q.answer4] %}
            <li>
              <input type="radio"
                     id="q{{ q.index }}_{{ loop.index }}"
                     name="q{{ q.index }}"
                     value="{{ loop.index }}"
                     class="peer hidden">

              <label for="q{{ q.index }}_{{ loop.index }}"
                     class="flex items-center border border-gray-300 rounded-lg p-3
                            cursor-pointer transition
                            peer-checked:border-blue-500 peer-checked:bg-blue-50">

                <span class="w-8 h-8 flex-shrink-0 rounded-full
                             bg-blue-500 text-white font-semibold flex
                             items-center justify-center mr-4">
                  {{ letters[loop.index0] }}
                </span>
                <span class="text-gray-700">{{ opt }}</span>
              </label>
            </li>
          {% endfor %}
        </ul>

        <input type="hidden" class="correct-answer" value="{{ q.correct_answer }}">
      </div>
    {% endfor %}

    <!-- navegação entre perguntas -->
    <div id="navBtns" class="mt-6 flex justify-end gap-4">
      <button id="btnNext"
              class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded
                     disabled:opacity-50"
              disabled>Próximo</button>

      <button id="btnSubmit"
              class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-6 rounded hidden">
        Submeter
      </button>
    </div>

    <!-- secção de resultado -->
    <div id="resultSection" class="mt-14 text-center hidden">
      <div id="resultIcon" class="mb-4"></div>
      <h2 class="text-2xl font-bold mb-2">Resultados</h2>
      <p id="resultText" class="text-lg mb-6"></p>
      <a href="/"
         class="inline-block bg-indigo-600 hover:bg-indigo-700 text-white font-medium px-6 py-3 rounded">
        Voltar à página principal
      </a>
    </div>

  </div>
</div>
{% endif %}
{% put scripts %}
<script>
$(function(){

  const total = {{ total }},
        slug  = '{{ slug }}';

  let current = 1,
      finished = false;

  /* verifica se utilizador respondeu */
  const $qBlk = idx => $(`.question-block[data-idx="${idx}"]`);
  const checkAnswered = () =>
    $qBlk(current).find('input:checked').length > 0;

  function updateProgress(){
    $('#progress').text(`Pergunta ${current} de ${total}`);
  }
  function handleButtons(){
    if(current < total){
      $('#btnNext').prop('disabled', !checkAnswered());
    }else{
      $('#btnSubmit').toggleClass('hidden', !checkAnswered());
    }
  }

  /* seleção de resposta */
  $('input[type=radio]').on('change', handleButtons);

  /* botão Próximo */
  $('#btnNext').on('click', ()=>{
    $qBlk(current).addClass('hidden');
    current++;
    $qBlk(current).removeClass('hidden');
    updateProgress();
    $('#btnNext').prop('disabled', true);
    if(current === total){
      $('#btnNext').addClass('hidden');
      handleButtons();
    }
    window.scrollTo({top:0,behavior:'smooth'});
  });

  /* submeter respostas */
  $('#btnSubmit').on('click', ()=>{

    let correct = 0;
    $('.question-block').each(function(){
      const chosen = $(this).find('input:checked').val();
      const ans    = $(this).find('.correct-answer').val();
      if(chosen && chosen === ans) correct++;
    });

    const pct = Math.round(correct/total*100);

    /* ícones de sucesso/insucesso */
    const svgOk = `
      <svg class="w-16 h-16 mx-auto text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
        <circle cx="12" cy="12" r="10" fill="currentColor" opacity=".1"/>
        <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7"/>
      </svg>`;
    const svgBad = `
      <svg class="w-16 h-16 mx-auto text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
        <circle cx="12" cy="12" r="10" fill="currentColor" opacity=".1"/>
        <path stroke-linecap="round" stroke-linejoin="round" d="M9 9l6 6m0-6l-6 6"/>
      </svg>`;

    $('#navBtns, .question-block, #progress').addClass('hidden');
    $('#resultIcon').html(pct >= 50 ? svgOk : svgBad);
    $('#resultText').html(`Acertaste <strong>${correct}</strong> de <strong>${total}</strong> perguntas (${pct} %).`);
    $('#resultSection').removeClass('hidden');

    $.request('onSaveResults',{
      data:{slug:slug,tried:total,correct:correct,total:total},
      success:()=>{ finished=true; history.pushState({end:true},'', '#result'); }
    });
  });

  /* bloqueia botão voltar após fim */
  $(window).on('popstate', e=>{
    if(e.originalEvent.state && e.originalEvent.state.end) history.go(1);
  });

  updateProgress();
});
</script>
{% endput %}