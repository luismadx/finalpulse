title = "Editor Product Training"
url = "/editor/:slug/:slide?"
layout = "default"
is_hidden = 0
==
<?php
use Db;
use Response;
use Redirect;

/**
 * Limpa XSS mais comuns sem destruir HTML5.
 */
function simpleSanitize(string $html): string
{
    // 1) script e style completos
    $html = preg_replace('#<(script|style)[^>]*>.*?</\1>#is', '', $html);

    // 2) atributos on...="..."  /  on...'...'
    $html = preg_replace('#\son\w+\s*=\s*"[^"]*"#i', '', $html);
    $html = preg_replace("#\son\w+\s*=\s*'[^']*'#i", '', $html);

    // 3) javascript: em href/src
    $html = preg_replace('#(href|src)\s*=\s*"javascript:[^"]*"#i', '$1="#"', $html);
    $html = preg_replace("#(href|src)\s*=\s*'javascript:[^']*'#i", "$1='#'", $html);

    return $html;
}

private function getProduct()
{
    $slug  = $this->param('slug');
    $product = Db::table('f_products')->where('slug', $slug)->first();
    return $product;
}

function onStart()
{

    // Inicialização
    $slug = $this->param('slug');
    $this['slug'] = $slug;   
    $this->page['showEditor'] = true;
    $slide = $this->param('slide');

    /* tornam-se variáveis Twig */
    $hasAudio=false;
    $hasMediaVisual=false;


    $user = Auth::getUser();
    if (! $user) {
        return Redirect::to('/');
    }

    // verifica se é product_manager ou admin
    $isManagerOrAdmin = $user->groups()->whereIn('code', ['product_manager', 'admin'])->exists();


    // se não for manager/admin, verifica ownership via f_categories.user_id
    if (! $isManagerOrAdmin) {
        $category = Db::table('f_categories')
            ->where('id', $product->id_categories)
            ->first();

        if (! $category || $category->user_id != $user->id) {
            return Redirect::to('/');
        }
    }


    $product = self::getProduct();
    if (! $product) {
        return Redirect::to('/');
    }

    $this['categoryId'] = $product->id_categories;
    $this['isPublished'] = $product->published == 1;
    if ($product->published == 1) {
        $this->page['showEditor'] = false;
    }

    // 1) Busca o conteúdo do slide atual (se já existir)
    $record = Db::table('f_content')
        ->join('f_template_sections', 'f_content.section_id', '=', 'f_template_sections.id')
        ->where('f_content.product_id', $product->id)
        ->where('f_content.slide', $slide)
        ->select(
            'f_content.content as saved_content',
            'f_template_sections.html_content as original_html'
        )
        ->first();

    if ($record) {
        $html = $record->saved_content !== null
            ? $record->saved_content
            : $record->original_html;

        $this['slideHtml']    = $html;
        $this['currentSlide'] = $slide;
        $this['productId']    = $product->id;
            // Detecta se o HTML tem <audio id="mediaAudio">
        /*if (strpos($html, 'id="mediaAudio"') !== false) {
            $isAudioSlide = true;
        }*/

            /* devolvemos sempre estas flags, mesmo que o HTML esteja vazio */
        $hasAudio       = strpos($html, 'id="mediaAudio"')   !== false;
        $hasMediaVisual = strpos($html, 'id="mediaVisual"')  !== false;
    }
    else {
        // Slide não encontrado: redireciona para o slide 0
        $this['slideHtml'] = '<p>Slide não encontrado.</p>';
        $this->page['showEditor'] = false;
    }

    // Número total de slides existentes
    $count = Db::table('f_content')
        ->where('product_id', $product->id)
        ->count();
    $this['slidesCount'] = $count - 1;

    // Lista de todos os índices de slide para este produto
    $slidesList = Db::table('f_content')
        ->where('product_id', $product->id)
        ->orderBy('slide','asc')
        ->select('id','slide')
        ->get();
    $this['slidesList'] = $slidesList;

    // 2) Busca seções disponíveis para “+ Novo Slide”
    $sections = Db::table('f_template_sections')
        //->join('f_products', 'f_template_sections.template_id', '=', 'f_products.template_id')
        //->where('f_products.id', $productId)
        ->where('f_template_sections.type', 'n')
        ->select(
            'f_template_sections.id',
            'f_template_sections.description',
            'f_template_sections.screenshot'
        )
        ->get();
    $this['sections'] = $sections;


 //
    /* tornam-se variáveis Twig */
    $this['showAudioBtn']  = $hasAudio;
    $this['showMediaBtn']  = $hasMediaVisual;
    
    $this['intro_title'] = $product->intro_title;
    $this['intro_subtitle'] = $product->intro_subtitle;

    //Db::table('f_products')->where('slug',$slug)->value('intro_title');
    //$this['intro_subtitle'] =Db::table('f_products')->where('slug',$slug)->value('intro_subtitle');
    
    $this['headerPartial'] = 'layouts/template1';


}

// Método para criar o novo slide via AJAX
function onCreateSlide()
{
    $slug      = $this->param('slug');
    $sectionId = post('sectionId');

    $product = Db::table('f_products')->where('slug', $slug)->first();

    if ($product->published == 1) {
        return Response::json(['success' => false, 'message' => 'Produto já publicado'], 403);
    }


    // 1) Busca o html_content da seção selecionada
    $section = Db::table('f_template_sections')
        ->where('id', $sectionId)
        ->select('html_content')
        ->first();

    $contentHtml = $section ? $section->html_content : null;

    // 2) Calcula o próximo índice de slide
    $count = Db::table('f_content')
        ->where('product_id', $product->id)
        ->count();
    // 2) Próximo índice (se 0 ou nulo, começa em 1)
    $newSlide = $count > 0
    ? $count + 1
    : 1;

    // 3) Insere novo slide, preenchendo o campo content com html_content
    Db::table('f_content')->insert([
        'product_id' => $product->id,
        'section_id' => $sectionId,
        'slide'      => $newSlide,
        'content'    => $contentHtml
    ]);

    return Response::json([
        'newSlide' => $newSlide
    ]);
}

// Método para salvar conteúdo do slide atual

function onSaveSlideContent()
{
    $slide     = $this->param('slide');
    $rawHtml   = post('content');
    $cleanHtml = self::simpleSanitize($rawHtml);

    if (strlen($cleanHtml) > 60*1024) {           // 60 KB
        return Response::json(['success'=>false,'message'=>'Máx. 60 KB.'], 413);
    }

    $product = self::getProduct();
    if (!$product)            return Response::json(['success'=>false,'message'=>'Erro a gravar!']);
    if ($product->published)  return Response::json(['success'=>false,'message'=>'Produto já publicado'], 403);

    Db::table('f_content')
        ->where('product_id', $product->id)
        ->where('slide',      $slide)
        ->update(['content' => $cleanHtml]);

    return Response::json(['success'=>true,'message'=>'Conteúdo salvo com sucesso!']);
}



/**
 * Handler AJAX para upload de imagem/video e gravação em DB,
 * com timestamp no nome e remoção do ficheiro antigo.
 */
function onUploadMedia()
{

    $slide   = $this->param('slide');

    $product = self::getProduct();
    if (!$product) {
        return Response::json(['success' => false, 'message' => 'Produto não encontrado']);
    }

    if ($product->published == 1) {
        return Response::json(['success' => false, 'message' => 'Produto já publicado'], 403);
    }


    // Encontra o registo de slideshow existente
    $slideshow = Db::table('f_content')
        ->where('product_id', $product->id)
        ->where('slide', $slide)
        ->first();

    if (!$slideshow) {
        return Response::json(['success' => false, 'message' => 'Slideshow não encontrado']);
    }

    // Valida upload
    if (!Input::hasFile('media')) {
        return Response::json(['success' => false, 'message' => 'Nenhum ficheiro enviado']);
    }

    $f    = Input::file('media');
    $orig = preg_replace('/[^\w\.\-]/', '_', $f->getClientOriginalName());
    // Timestamp detalhado para não colidir
    $ts   = date('YmdHis');
    $fn   = "{$ts}_{$orig}";
    $type = $f->getClientMimeType();    // ex: image/jpeg ou video/mp4

    // Pasta de destino
    $fld = storage_path('app/public/uploads/slideshows');
    if (!is_dir($fld)) {
        mkdir($fld, 0755, true);
    }

    // Se já havia um ficheiro anterior, apaga-o
    if (!empty($slideshow->filename)) {
        $oldPath = "$fld/{$slideshow->filename}";
        if (file_exists($oldPath)) {
            @unlink($oldPath);
        }
    }

    // Move novo ficheiro
    $tmp = $f->getRealPath();
    $dst = "$fld/$fn";
    if (!move_uploaded_file($tmp, $dst)) {
        return Response::json(['success' => false, 'message' => 'Erro ao mover ficheiro']);
    }

    // Atualiza DB
    Db::table('f_content')
        ->where('id', $slideshow->id)
        ->update([
            'filename' => $fn,
            'filetype' => $type,
            'updated_at'=> date('Y-m-d H:i:s'),
        ]);

    return Response::json([
        'success'  => true,
        'filename' => $fn,
        'filetype' => $type,
        'url'      => '/storage/app/public/uploads/slideshows/' . $fn
    ]);
}



/**
 * Upload de áudio (MP3) – grava em filename_audio
 */
function onUploadAudio()
{
    
    $slide = $this->param('slide');

    $product = self::getProduct();
    if (!$product) {
        return Response::json(['success' => false, 'message' => 'Produto não encontrado']);
    }

    if ($product->published == 1) {
        return Response::json(['success' => false, 'message' => 'Produto já publicado'], 403);
    }


    $slideshow = Db::table('f_content')
        ->where('product_id', $product->id)
        ->where('slide',      $slide)
        ->first();

    if (!$slideshow) {
        return Response::json(['success' => false, 'message' => 'Slide não encontrado']);
    }

    if (!Input::hasFile('audio')) {
        return Response::json(['success' => false, 'message' => 'Nenhum áudio enviado']);
    }

    $f      = Input::file('audio');
    $orig   = preg_replace('/[^\w\.\-]/', '_', $f->getClientOriginalName());
    $fn     = date('YmdHis') . "_{$orig}";               // nome único
    $folder = storage_path('app/public/uploads/slideshows');
    if (!is_dir($folder)) mkdir($folder, 0755, true);

    // apaga ficheiro de áudio anterior se existir
    if (!empty($slideshow->filename_audio)) {
        @unlink("{$folder}/{$slideshow->filename_audio}");
    }

    // move novo ficheiro
    if (!move_uploaded_file($f->getRealPath(), "{$folder}/{$fn}")) {
        return Response::json(['success' => false, 'message' => 'Falha ao gravar áudio']);
    }

    // atualiza DB  (agora **só** filename_audio)
    Db::table('f_content')
      ->where('id', $slideshow->id)
      ->update([
          'filename_audio' => $fn,
          'updated_at'     => date('Y-m-d H:i:s')
      ]);

    return Response::json([
        'success'  => true,
        'filename' => $fn,
        'url'      => '/storage/app/public/uploads/slideshows/' . $fn
    ]);
}



function onPublishProduct()
{
    $slug    = $this->param('slug');
    $product = Db::table('f_products')->where('slug', $slug)->first();
    if (!$product) {
        return Response::json(['success' => false], 404);
    }

    $pages      = Db::table('f_content')   ->where('product_id', $product->id)->count();
    $questions  = Db::table('f_questions')->where('product_id', $product->id)->count();

    if ($pages < 2 || $questions < 2) {
        return Response::json([
            'success'    => false,
            'reason'     => 'validation',
            'pages'      => $pages,
            'questions'  => $questions
        ], 422);               // «Unprocessable Entity»
    }

    Db::table('f_products')
        ->where('id', $product->id)
        ->update(['published' => 1]);

    return Response::json(['success' => true]);
}




function onDeleteSlide()
{
    $slide = post('slide');

    $product = self::getProduct();
    if (!$product) {
        return Response::json(['success' => false, 'message' => 'Produto não encontrado']);
    }

    if ($product->published == 1) {
        return Response::json(['success' => false, 'message' => 'Produto já publicado'], 403);
    }


    $pid = $product->id;

    // 1) busca o registo para apagar ficheiros
    $rec = Db::table('f_content')->where('product_id', $pid)->where('slide', $slide)->first();
    if ($rec) {
        $fld = storage_path('app/public/uploads/slideshows');
        try {
            if (!empty($rec->filename)) {
                @unlink("{$fld}/{$rec->filename}");
            }
            if (!empty($rec->filename_audio)) {
                @unlink("{$fld}/{$rec->filename_audio}");
            }
        } catch (\Throwable $e) {
            // ignora erros
        }
    }

    // 2) apaga o registo
    Db::table('f_content')->where('product_id', $pid)->where('slide', $slide)->delete();

    // 3) reordena
    $rows = Db::table('f_content')->where('product_id', $pid)->orderBy('slide')->get();
    foreach ($rows as $i => $r) {
        Db::table('f_content')
          ->where('id', $r->id)
          ->update(['slide' => $i + 1]);
    }

    return Response::json(['success'=>true]);
}


// acrescenta no controller:
function onReorderSlides()
{

    $product = self::getProduct();
    if (!$product) {
        return Response::json(['success' => false, 'message' => 'Produto não encontrado']);
    }

    $order = post('order'); // array de ids, na ordem nova
    foreach ($order as $i => $id) {
        Db::table('f_content')->where('id',$id)->update(['slide' => $i+1]);
    }
    return Response::json(['success'=>true]);
}

?>

==
<!DOCTYPE html>
<html lang="pt-PT">
<head>
  <meta charset="UTF-8">
  <title>Editor de Páginas - Produto {{ productId }}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Trumbowyg CSS -->
  <link rel="stylesheet" href="{{ 'assets/js/editor/trumbowyg.min.css'|theme }}">
</head>


<body class="bg-gray-50">

  <!-- BOTÃO TOGGLE – sempre visível -->
  <button id="toggleSidebar"
          class="fixed top-5 left-5 z-50 p-2 rounded bg-gray-800 text-white shadow"
          aria-label="Mostrar/ocultar menu">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="2"
         viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round">
      <path d="M3 12h18M3 6h18M3 18h18"/>
    </svg>
  </button>

  

  <!-- SIDEBAR -->
  <aside id="sidebar"
         class="fixed top-16 left-0 bottom-0 w-64 bg-gray-800 text-gray-100 border-r border-gray-700 overflow-y-auto z-40">
    <div class="p-4">
        <div class="mt-6">

        {% if not isPublished %}   
        <button id="openSectionModal" class="w-full flex items-center justify-center px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition">
          + Nova Página
        </button>
        {% endif %}

      </div>

<ul id="slidesList" class="space-y-2 cursor-move">
  {% for slide in slidesList %}
    {% set isCurrent = (slide.slide == currentSlide) %}
    <li data-id="{{ slide.id }}" class="flex items-center justify-between">
      <a href="/editor/{{ slug }}/{{ slide.slide }}"
         class="flex-1 px-4 py-2 {{ isCurrent
             ? 'bg-gray-700 text-white rounded-md shadow-sm'
             : 'text-gray-300 hover:bg-gray-700 hover:text-white rounded-md' }}">
        Página {{ slide.slide }}
      </a>
      {% if not isPublished %}
      <button
        type="button"
        class="delete-slide-btn p-1 cursor-pointer rounded hover:bg-red-700 focus:outline-none text-red-500"
        data-slide="{{ slide.slide }}"
        title="Eliminar página {{ slide.slide }}">
        ❌
      </button>
      {% endif %}
    </li>
  {% endfor %}
</ul>

    <div class="mt-6 space-y-2">
        <a href="/questions_editor/{{ slug }}/" class="w-full flex items-center justify-center px-3 py-2 bg-yellow-600  text-white rounded-md hover:bg-yellow-600  transition">
          Editor Questões
        </a>

        {% if not isPublished %}
        <button id="publishBtn" class="w-full flex items-center justify-center px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition">  Publicar </button>
        {% endif %}

  </div>

<div class="mt-6 flex gap-2">
  <a href="/training/{{ slug }}"
     class="flex-1 flex items-center justify-center gap-2 px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition">
    <!-- ícone olho -->
    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
      <path stroke-linecap="round" stroke-linejoin="round" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.477 0 8.268 2.943 9.542 7-1.274 4.057-5.065 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
    </svg>
    Visualizar
  </a>

  <a href="/products/{{ categoryId }}"
     class="flex-1 flex items-center justify-center gap-2 px-3 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition">
    <!-- ícone cubo/caixa -->
    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" d="M17 16l4-4m0 0l-4-4m4 4H7"/>
      <path stroke-linecap="round" stroke-linejoin="round" d="M7 4v16"/>
    </svg>
    Sair
  </a>
</div>

    </div>
  </aside>


<!-- Modal de upload de mídia -->
<div id="mediaModal"
     class="fixed inset-0 bg-black/50 flex items-center justify-center hidden z-50">
  <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6 relative">
    <button id="closeMediaModal"
            class="absolute top-3 right-3 text-gray-500 hover:text-gray-800 text-2xl">&times;</button>

    <h3 class="text-xl mb-4">Enviar Imagem ou Vídeo</h3>

    <form id="mediaForm"
          data-request="onUploadMedia"
          data-request-files="media:#mediaFile"
          class="space-y-4">

      <!-- input escondido + botão estilizado -->
      <input type="file" id="mediaFile" name="media"
             accept="image/*,video/*" class="hidden">
      <label for="mediaFile"
             class="inline-block px-6 py-2 bg-indigo-600 text-white rounded cursor-pointer">
        Escolher ficheiro
      </label>

      <div id="mediaPreview"
           class="w-full h-48 bg-gray-100 flex items-center justify-center rounded overflow-hidden">
        Selecione um ficheiro para pré-visualizar
      </div>

      <div class="text-right">
        <button type="submit"
                class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
          Carregar
        </button>
      </div>
    </form>
  </div>
</div>



<!-- Modal de upload de Áudio -->
    <div id="audioModal"
         class="fixed inset-0 bg-black/50 flex items-center justify-center hidden z-50">
      <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6 relative">
        <button id="closeAudioModal"
                class="absolute top-3 right-3 text-gray-500 hover:text-gray-800 text-2xl">&times;</button>

        <h3 class="text-xl mb-4">Enviar Áudio (MP3)</h3>

        <form id="audioForm"
              data-request="onUploadAudio"
              data-request-files="audio:#audioFile"
              class="space-y-4">

          <!-- input escondido + botão estilizado -->
          <input type="file" id="audioFile" name="audio" accept="audio/mpeg" class="hidden">
          <label for="audioFile"
                 class="inline-block px-6 py-2 bg-indigo-600 text-white rounded cursor-pointer">
            Escolher ficheiro
          </label>

          <audio id="audioPreview" class="w-full mt-3 hidden" controls></audio>

          <div class="text-right">
            <button type="submit"
                    class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700">
              Carregar
            </button>
          </div>
        </form>
      </div>
    </div>

  <!-- Modal Seleção de Seção -->
<div id="sectionModal"
     class="fixed inset-0 bg-black bg-black/50 flex items-center justify-center hidden z-50">
  <div class="bg-white rounded-lg shadow-lg w-full max-w-md sm:max-w-3xl lg:max-w-5xl p-4 sm:p-6 relative max-h-[90vh] overflow-y-auto">
    <button id="closeSectionModal"
            class="absolute top-3 right-3 text-gray-500 hover:text-gray-800 text-2xl">&times;</button>
    <h3 class="text-lg sm:text-xl font-semibold mb-4">Selecione o template para a Nova Página</h3>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-2 md:gap-4">
      {% for section in sections %}
        <div class="section-card flex flex-col border rounded overflow-hidden cursor-pointer
                    w-full h-60"
             data-section-id="{{ section.id }}">
          <div class="bg-gray-200 text-gray-700 text-center text-xs sm:text-sm p-1">
            {{ section.description }}
          </div>
          <div class="bg-white flex-1 flex items-center justify-center overflow-hidden">
            <img src="{{ ('assets/templates/template1/screenshots/' ~ section.screenshot) | theme }}"
                 alt="Screenshot {{ section.id }}"
                 class="object-cover h-full w-full">
          </div>
        </div>
      {% endfor %}
    </div>
    <div class="mt-4 sm:mt-6 flex justify-end">
      <button id="applySectionButton"
              class="px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50"
              disabled>
        Aplicar Template Selecionado
      </button>
    </div>
  </div>
</div>




<!-- TOAST -->
<div id="toast"
     class="fixed top-6 left-1/2 transform -translate-x-1/2 bg-green-600 text-white px-6 py-3 rounded shadow-lg hidden z-50 transition-opacity duration-300 text-center min-w-[250px] max-w-[90%]">
</div>


  <!-- Scripts -->

  <!--  <link rel="stylesheet" href="{{ 'assets/js/editor/trumbowyg.min.js'|theme }}"> -->

    <script src="https://cdn.jsdelivr.net/npm/trumbowyg@2.27.3/dist/trumbowyg.min.js"></script>
    <script src="{{ 'assets/js/editor/trumbowyg.fontsize.min.js'|theme }}"></script>
    <script src="{{ 'assets/js/editor/Sortable.min.js'|theme }}"></script>
    <script src="{{ 'assets/js/editor/trumbowyg.fontfamily.min.js'|theme }}"></script>
    <script src="{{ 'assets/js/editor/trumbowyg.colors.min.js'|theme }}"></script>
    <script src="{{ 'assets/js/editor/trumbowyg.history.min.js'|theme }}"></script>
    
    <!-- <script src="{{ 'assets/js/editor/jquery-resizable.min.js'|theme }}"></script>

    <script src="{{ 'assets/js/editor/trumbowyg.resizimg.min.js'|theme }}"></script> -->


    <link rel="stylesheet" href="{{ 'assets/js/editor/trumbowyg.colors.min.css'|theme }}" />


  <script>
    const MAX_MB   = 50;
    const MAX_SIZE = MAX_MB * 1024 * 1024;   // 50 MB em bytes

    $(function() {
      // 1) Inicializar estado da sidebar (escondida em mobile)
      if (window.innerWidth < 768) {
        $('#sidebar').hide();
      }

      // 2) Toggle sidebar (sempre funciona em qualquer largura)
      $('#toggleSidebar').on('click', function() {
        $('#sidebar').toggle();
      });


    {% if this.page.showEditor %}

    function resetHistory () {
      const api = $('#slideEditor').data('trumbowyg');
      if (!api?.o?.plugins?.history) return;           // plugin não carregado

      // limpa pilha e reposiciona índice
      api.o.plugins.history._stack  = [];
      api.o.plugins.history._index  = -1;

      // desactiva botões da toolbar
      api.$box.find('.trumbowyg-historyUndo-button, .trumbowyg-historyRedo-button')
              .addClass('trumbowyg-disable');
    }



    // 3) Editor Trumbowyg + salvar
    var contentDiv = $('.content');
    var rawHtml    = contentDiv.html().trim();
    var textarea   = $('<textarea id="slideEditor" class="w-full h-96 border rounded">').val(rawHtml);
    var newContent = $('<div class="content">').append(textarea);
    contentDiv.replaceWith(newContent);


    const $editor = $('#slideEditor').trumbowyg({
      semantic: false,
      tagMap: {},
      tagsToRemove: [],
      btns: [
        ['fontfamily'],
        ['fontsize'], 
        ['foreColor', 'backColor'],
        ['strong', 'em'],
        ['historyUndo', 'historyRedo'],
        ['unorderedList'],
        ['fullscreen'], 
      ],
        plugins: {
        fontsize: {
          sizeList: ['12px', '14px', '16px', '18px', '24px', '32px']
        }
      }
      
    });

    $editor.on('tbwinit', function() {

      const saveBtn = $('<button type="button" title="Guardar Página" class="trumbowyg-button save-slide-btn"><svg fill="#70cd87" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 407.096 407.096" xml:space="preserve" stroke="#70cd87"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <g> <path d="M402.115,84.008L323.088,4.981C319.899,1.792,315.574,0,311.063,0H17.005C7.613,0,0,7.614,0,17.005v373.086 c0,9.392,7.613,17.005,17.005,17.005h373.086c9.392,0,17.005-7.613,17.005-17.005V96.032 C407.096,91.523,405.305,87.197,402.115,84.008z M300.664,163.567H67.129V38.862h233.535V163.567z"></path> <path d="M214.051,148.16h43.08c3.131,0,5.668-2.538,5.668-5.669V59.584c0-3.13-2.537-5.668-5.668-5.668h-43.08 c-3.131,0-5.668,2.538-5.668,5.668v82.907C208.383,145.622,210.92,148.16,214.051,148.16z"></path> </g> </g> </g></svg>\
          </svg></i></button>');

    saveBtn.on('click', function () {
      // 1) Aponta ao contenteditable e ao editor Trumbowyg
      const $edDom = $('.trumbowyg-editor');
      const $audio  = $edDom.find('#mediaAudio');

      if ($audio.length) {
        const $source = $audio.find('source');
        const src     = $source.attr('src');

        if (src) {
          // 2) Gera o HTML fixo e substitui no contenteditable
          const fixedHtml = `
            <audio id="mediaAudio" controls style="width: 100%; border-radius: 6px;">
              <source src="${src}" type="audio/mpeg">
              O teu navegador não suporta a reprodução de áudio.
            </audio>
          `;
          $audio.replaceWith(fixedHtml);
          console.log('[Áudio atualizado] src:', src);
        }
      }

      // 3) Agora sincroniza o conteúdo do contenteditable de volta para a textarea
      //    Isto vai fazer com que o trumbowyg('html') já inclua o novo <audio src="...">
      const newHtml = $edDom.html();
      $editor.trumbowyg('html', newHtml);
      $editor.trumbowyg('syncTextarea');

      // 4) Lê a HTML “oficial” e envia
      const htmlParaGravar = $editor.trumbowyg('html');
      $.request('onSaveSlideContent', {
        data: { content: htmlParaGravar },
        success: function () {
          showToast('Conteúdo salvo com sucesso!', 'success');
        },
        error: function (jqXHR, textStatus, errorThrown) {
          showToast('Erro ao salvar: ' + errorThrown, 'error');
        }
      });
    });
  // Adiciona os botões ao início da toolbar
  const $toolbar = $editor.closest('.trumbowyg-box').find('.trumbowyg-button-pane');

    // Botão ÁUDIO

    {% if showAudioBtn %}
    const audioBtn = $(`
      <button type="button" title="Inserir Áudio" class="trumbowyg-button insert-audio-btn">
        <!-- nota musical -->

<svg fill="#000000" width="79px" height="79px" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M4 10.171V0h12v6H6v7c0 1.657-1.347 3-3 3-1.657 0-3-1.347-3-3a3.002 3.002 0 0 1 4-2.829zM4 12H2v2h2v-2zM6 2v2h8V2H6zm8 6.171V6h2v5c0 1.657-1.347 3-3 3-1.657 0-3-1.347-3-3a3.002 3.002 0 0 1 4-2.829zM14 10h-2v2h2v-2z" fill-rule="evenodd"></path> </g></svg>


      </button>
    `);
    audioBtn.on('click', () => $('#audioModal').removeClass('hidden'));
    $toolbar.prepend(audioBtn);
    {% endif %}

    {% if showMediaBtn %}
        // Botão MÍDIA com ícone SVG
      const mediaBtn = $(`
        <button type="button" title="Inserir Media" class="trumbowyg-button insert-media-btn">

          <svg fill="#000000" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 416.979 416.979" xml:space="preserve"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <path d="M208.489,416.979c115.146,0,208.49-93.344,208.49-208.489C416.979,93.344,323.635,0,208.489,0S0,93.343,0,208.489 C0,323.635,93.343,416.979,208.489,416.979z M127.24,219.452l68.259-118.21c2.68-4.641,7.632-7.499,12.99-7.499 s10.31,2.858,12.99,7.499l68.258,118.21c2.682,4.642,2.682,10.359,0.002,15c-2.68,4.642-7.631,7.501-12.99,7.501h-33.26v66.282 c0,8.284-6.715,15-15,15h-40c-8.284,0-15-6.716-15-15v-66.282H140.23c-5.359,0-10.312-2.859-12.991-7.501 C124.56,229.812,124.56,224.094,127.24,219.452z"></path> </g> </g></svg>

        </button>
      `);

      mediaBtn.on('click', function() {
        $('#mediaModal').removeClass('hidden');
      });
      $toolbar.prepend(mediaBtn);
    {% endif %}

    $toolbar.prepend(saveBtn);


    // encontra o div contenteditable
    const $ed = $editor.closest('.trumbowyg-box').find('.trumbowyg-editor');
    // retira todos os handlers de dblclick que o plugin adicionou
    $ed.off('dblclick.trumbowyg');
    // previne qualquer novo dblclick sobre IMG
    $ed.on('dblclick', 'img', e => {
        e.stopImmediatePropagation();
        e.preventDefault();
    });





    });


      {% endif %}
      // 4) Modal "+ Novo Slide"
      var productId         = "{{ productId }}";
      var slug         = "{{ slug }}";
      var selectedSectionId = null;

      $('#openSectionModal').on('click', function() {
        $('#sectionModal').removeClass('hidden');
      });

      $('#closeSectionModal').on('click', function() {
        $('#sectionModal').addClass('hidden');
        clearSelection();
      });

      $('#sectionModal').on('click', function(e) {
        if (e.target.id === 'sectionModal') {
          $('#sectionModal').addClass('hidden');
          clearSelection();
        }
      });

    $('.section-card').on('click', function() {
      $('.section-card')
        .removeClass('border-4 border-indigo-500')    // tira a selecção antiga
        .removeClass('border-2');                      // deita fora o border-2 se ainda existir
      $(this)
        .addClass('border-4 border-indigo-500');       // aplica border-4 com cor indigo
      selectedSectionId = $(this).data('section-id');
      $('#applySectionButton').prop('disabled', false);
    });


      function clearSelection() {
        $('.section-card').removeClass('border-2 border-indigo-500');
        selectedSectionId = null;
        $('#applySectionButton').prop('disabled', true);
      }

      $('#applySectionButton').on('click', function() {
        if (!selectedSectionId) return;
        $.request('onCreateSlide', {
          data: { sectionId: selectedSectionId },
          success: function(data) {
            window.location.href = '/editor/' + slug + '/' + data.newSlide;
          },
          error: function(jqXHR, textStatus, errorThrown) {
            alert('Erro ao criar slide: ' + errorThrown);
          }
        });
      });





  // abre fecha modal de mídia
  $('#closeMediaModal').on('click', () => $('#mediaModal').addClass('hidden'));
  $('#closeAudioModal').on('click', () => $('#audioModal').addClass('hidden'));

  // preview ao escolher ficheiro
  $('#mediaFile').on('change', function(){
    const file = this.files[0], $prev = $('#mediaPreview');
    if (!file) {
      $prev.text('Selecione um ficheiro para pré-visualizar');
      return;
    }

  // valida tamanho
  if (file && file.size > MAX_SIZE) {
    showToast(`Tamanho máximo ${MAX_MB} MB excedido!`, 'error');
    this.value = '';           // limpa input
    $prev.text('Selecione um ficheiro para pré-visualizar');
    return;
  }

    const reader = new FileReader();
    reader.onload = e => {
      if (file.type.startsWith('image/')) {
        $prev.html(`<img src="${e.target.result}" class="w-full h-full object-contain"/>`);
      } else if (file.type.startsWith('video/')) {
        $prev.html(`
          <video controls class="w-full h-full object-contain">
            <source src="${e.target.result}" type="${file.type}">
            Seu navegador não suporta pré-visualização de vídeo.
          </video>
        `);
      }
    };
    reader.readAsDataURL(file);
  });

  // após upload bem-sucedido, atualiza mediaVisual e fecha modal

$(document).on('ajaxSuccess', function (e, ctx, data) {
  if (!data.success) return;



  {% if showAudioBtn %}
  /* ---------- ÁUDIO (novo handler separado) ---------- */
  if (ctx.handler === 'onUploadAudio') {
    const audioEl = document.getElementById('mediaAudio');
    if (audioEl) {
      const source = audioEl.querySelector('source');
      if (source) {
        source.src = data.url;   // data.url vem do onUploadAudio
        audioEl.load();
      }
    }
    showToast('Áudio atualizado com sucesso!', 'success');
    $('#audioModal').addClass('hidden');
    $('.save-slide-btn').trigger('click');
     resetHistory();
    return;                     // já tratou, sai
  }
 {% endif %}


    {% if showMediaBtn %}
  /* ---------- IMAGEM / VÍDEO (handler antigo) ---------- */
  if (ctx.handler !== 'onUploadMedia') return;

  const filetype  = data.filetype || '';   
  const mediaHtml = filetype.startsWith('image/')
    ? `<img src="${data.url}"/>`
    : `<video controls >
         <source src="${data.url}" type="${filetype}">
       </video>`;

  const $ed  = $('#slideEditor');
  let html   = $ed.trumbowyg('html');
  const $tmp = $('<div>').html(html);

  $tmp.find('#mediaVisual').empty().append(mediaHtml);
  html = $tmp.html();

  $ed.trumbowyg('html', html);
  $ed.trumbowyg('syncTextarea');

  showToast('Mídia atualizada com sucesso!', 'success');


  $('#mediaModal').addClass('hidden');

 // dispara guardar
    $('.save-slide-btn').trigger('click');
    resetHistory();

  {% endif %}


});





// Drag & drop no mediaPreview
const $preview = $('#mediaPreview');
const $fileInput = $('#mediaFile');

$preview.on('dragover', function(e){
  e.preventDefault();
  e.stopPropagation();
  $(this).addClass('border-dashed border-2 border-blue-500');
});

$preview.on('dragleave drop', function(e){
  e.preventDefault();
  e.stopPropagation();
  $(this).removeClass('border-dashed border-2 border-blue-500');
});

$preview.on('drop', function(e){
  const dt = e.originalEvent.dataTransfer;
  if (!dt || !dt.files || !dt.files.length) return;
  const file = dt.files[0];
  // actualiza input
  const dataTransfer = new DataTransfer();
  dataTransfer.items.add(file);
  $fileInput[0].files = dataTransfer.files;
  // preview
  const reader = new FileReader();
  reader.onload = ev => {
    if (file.type.startsWith('image/')) {
      $preview.html(`<img src="${ev.target.result}" class="w-full h-full object-contain"/>`);
    } else if (file.type.startsWith('video/')) {
      $preview.html(`
        <video controls class="w-full h-full object-contain">
          <source src="${ev.target.result}" type="${file.type}">
        </video>
      `);
    }
  };
  reader.readAsDataURL(file);
});




    });

function showToast(message, type = 'success') {
  const toast = $('#toast');
  toast.removeClass('hidden');

  // Aplica cor conforme o tipo
  toast
    .removeClass('bg-green-600 bg-red-600')
    .addClass(type === 'success' ? 'bg-green-600' : 'bg-red-600')
    .text(message);

  // Mostra e esconde após 3 segundos
  setTimeout(() => toast.addClass('hidden'), 3000);
}





$(function () {
  /* delegação = funciona mesmo se o botão for criado depois */
  $(document).on('click', '.save-slide-btn', function (e) {
    e.preventDefault();
    e.stopPropagation();

    // … código de guardar via $.request …
  });

  $(document).on('click', '.insert-media-btn', function (e) {
    e.preventDefault();
    e.stopPropagation();
    $('#mediaModal').removeClass('hidden');
  });
});



    /* -------- ÁUDIO -------- */
    $('#audioFile').on('change', function () {
      const file   = this.files[0];
      const $prev  = $('#audioPreview');

      if (file && file.size > MAX_SIZE) {
        showToast(`Tamanho máximo ${MAX_MB} MB excedido!`, 'error');
        this.value = '';
        $prev.addClass('hidden').attr('src', '');
        return;
      }

      if (file) {                          // pré-visualização
        $prev.attr('src', URL.createObjectURL(file)).removeClass('hidden');
      }
    });

/* -------- duplo-check no submit -------- */
    $('#mediaForm, #audioForm').on('submit', function (e) {
      const fileInput = $(this).find('input[type=file]')[0];
      if (fileInput.files.length && fileInput.files[0].size > MAX_SIZE) {
        showToast(`Tamanho máximo ${MAX_MB} MB excedido!`, 'error');
        e.preventDefault();                // cancela o upload
      }
    });


$(document).on('click', '#publishBtn', function (e) {
  e.preventDefault();

  Swal.fire({
    icon: 'question',
    title: 'Confirmar publicação',
    text: 'Tem a certeza que quer publicar este produto?',
    showCancelButton: true,
    confirmButtonText: 'Sim, publicar',
    cancelButtonText: 'Cancelar'
  }).then(result => {
    if (!result.isConfirmed) return;

    $.request('onPublishProduct', {
      success() {
        showToast('Publicado…', 'success');
        window.location.reload();
      },
      error(jqXHR) {
        if (jqXHR.status === 422 &&
            jqXHR.responseJSON?.reason === 'validation') {

          const p = jqXHR.responseJSON.pages;
          const q = jqXHR.responseJSON.questions;

          Swal.fire({
            icon: 'warning',
            title: 'Não é possível publicar',
            text: `São necessárias pelo menos 2 páginas e 2 questões.\nActualmente: ${p} página(s) e ${q} questão(ões).`
          });
        } else {
          showToast('Erro ao publicar.', 'error');
        }
      }
    });
  });
});




$(document).on('click', '.delete-slide-btn', function(e) {
  e.preventDefault();
  const slide = $(this).data('slide');
  Swal.fire({
    icon: 'warning',
    title: 'Confirmar eliminação',
    text: `Tem a certeza que quer eliminar a página ${slide}?`,
    showCancelButton: true,
    confirmButtonText: 'Sim, eliminar',
    cancelButtonText: 'Cancelar'
  }).then((result) => {
    if (result.isConfirmed) {
      $.request('onDeleteSlide', {
        data: { slide },
        success: () => location.reload()
      });
    }
  });
});


  {% if not isPublished %}
  const slug = "{{ slug }}";
  new Sortable(document.getElementById('slidesList'), {
    animation: 150,
    onEnd(evt) {
      // monta o novo order
      const order = Array.from(this.el.children)
                         .map(li => li.dataset.id);
      // índice 0-based → slide 1-based
      const newSlideIndex = evt.newIndex + 1;

      $.request('onReorderSlides', {
        data: { order },
        success() {
          // redireciona para o slide que acabou de mover
          window.location.href = `/editor/${slug}/${newSlideIndex}`;
        }
      });
    }
  });
    {% endif %}

  </script>

</body>
</html>